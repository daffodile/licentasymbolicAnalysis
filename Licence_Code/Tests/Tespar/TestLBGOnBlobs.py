import os

from sklearn.datasets import make_blobs
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans

from TESPAR.LBG import VQ_LGB

'''
    test LBG.py algorithm to see if it has the right clusters for a generated dataset
'''
data = make_blobs(n_samples=200, n_features=1, centers=4, cluster_std=0.5)
# plt.scatter(data[0][:, 0], data[0][:, 1], c=data[1], cmap='rainbow')
# plt.title('generated 4 clusters')
# plt.show()

file_name = os.getcwd() + "/lbg_generated_clusters_1_feature.txt"
f = open(file_name, 'a+')

##################### write in a file the clusters generated by dataset.make_blobs###################
# print('data 1 feature')
# print(data[0])
f.write('\n\ndata labels 4 clusters\n')
for i in range(200):
    f.write(str(data[1][i]) + ' ')

'''
    test kmeans for generated data
'''

f.write('\nkmeans 4 clusters\n')

kmeans = KMeans(n_clusters=4)
kmeans.fit(data[0])
labels = kmeans.predict(data[0])
for i in range(200):
    f.write(str(labels[i]) + ' ')

# fig, (ax1, ax2) = plt.subplots(1, 2, sharey=True, figsize=(10, 6))
# ax1.set_title('k means')
# ax1.scatter(data[0][:, 0], data[0][:, 1], c=kmeans.labels_, cmap='rainbow')
#
# ax2.set_title('original')
# ax2.scatter(data[0][:, 0], data[0][:, 1], c=data[1], cmap='rainbow')
# plt.show()


vq_lg = VQ_LGB(data[0], 4, 0.00005, 30000)
vq_lg.run()
# outout = vq_lg.get_codebook()
vq_lg.print_clusters()

# file_name = os.getcwd() + "/clusters_light_stim_others.txt"

# lbg_labels = [0 for j in range(200)]

##################### write in a file the clusters generated by LBG.py ###################
f.write('\nLBG.py 4 clusters \n')
for x in range(200):
    index: int
    for index in range(len(vq_lg.clusters)):
        flattened_patterns = [item for items in vq_lg.clusters[index].patterns for item in items]
        if data[0][x] in flattened_patterns:
            f.write(str(index) + ' ')
            # lbg_labels[x] = index
    # f.write('\n')

f.close()
